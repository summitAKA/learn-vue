(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{428:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"讲一下盒模型-普通盒模型和怪异盒模型有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲一下盒模型-普通盒模型和怪异盒模型有什么区别"}},[t._v("#")]),t._v(" 讲一下盒模型，普通盒模型和怪异盒模型有什么区别？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("因为盒模型是css布局的基础，它的作用是规定了网页元素在网页上如何显示以及元素之间的相互关系，css定义所有的元素都可以拥有 像盒子一样的外形和平面空间。即都包含内容区、补白（填充）、边框、边界(外边距)。\n内容区(content):元素的宽和高\n补白（填充）(padding)：元素内容和外边缘之间的空间\n边框(border)：盒子的外边缘\n边界(外边距)(margin)：盒子外边缘以外的空间\n这其实就是一个标准的盒模型")])]),t._v(" "),a("li",[a("p",[t._v("怪异盒模型的组成部分则只划分为了两个部分，分别为：\nwidth/height(元素的内容宽或高)：内容区(content)、补白（填充）(padding)以及边框(border)的总和\n边界(外边距)(margin)：盒子外边缘以外的空间\n不难看出，怪异盒模型的一个构成形式为元素的宽高包含了填充以及边框所占有的空间，也就是说当我们页面元素为怪异盒模型的时候，给予元素padding或者border属性之后并不会改变元素原有宽高的值，而如果我们给标准盒模型的元素添加padding或者border属性之后，元素最终的宽高值会发生变化，盒子会变大，这也就是标准盒模型与怪异盒模型区别所在。")])])]),t._v(" "),a("h2",{attrs:{id:"块元素和行内元素区别是什么-常见块元素和行内元素有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块元素和行内元素区别是什么-常见块元素和行内元素有哪些"}},[t._v("#")]),t._v(" 块元素和行内元素区别是什么？常见块元素和行内元素有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("行内元素(inline element)——也叫做内联元素，只占据它对应标签的边框所包含的空间。\n特点——")])]),t._v(" "),a("ul",[a("li",[t._v("和其他元素都在同一行；")]),t._v(" "),a("li",[t._v("高、行高及外边距和内边距不可改变；")]),t._v(" "),a("li",[t._v("宽度就是它的文字和图片的宽度，不可改变；")]),t._v(" "),a("li",[t._v("内联元素只能容纳文本或者其他内联元素。")])]),t._v(" "),a("ul",[a("li",[t._v("块级元素(block element)——块级元素占据其父元素（容器）的整个空间，因此创建了一个“块”。\n特点——")])]),t._v(" "),a("ul",[a("li",[t._v("总是在新行上开始；")]),t._v(" "),a("li",[t._v("高度、行高以及外边距和内边距都可控制；")]),t._v(" "),a("li",[t._v("宽度默认是它容器的100%，除非设定一个宽度；")]),t._v(" "),a("li",[t._v("块级元素可以容纳内联元素和其他块级元素。")])]),t._v(" "),a("ul",[a("li",[t._v("行内块状元素(inline-block element)——综合了行内元素和块状元素的特性，但是各有取舍。\n特点——")])]),t._v(" "),a("ul",[a("li",[t._v("不自动换行")]),t._v(" "),a("li",[t._v("能够识别宽高")]),t._v(" "),a("li",[t._v("默认排列方式为从左到右")])]),t._v(" "),a("ul",[a("li",[t._v("区别：行内元素与其他元素在同一行；块级元素独占一行。\n行内元素，只能容纳文本或其他内联元素；块级元素，能容纳其他块级元素或者内联元素。\n行内元素中宽度(width)、高度(height)、内边距(padding)、外边距(margin)不可改变； 块级元素中宽度、高度、内边距、外边距可以设置。")])]),t._v(" "),a("h2",{attrs:{id:"html语义化标签-有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html语义化标签-有哪些"}},[t._v("#")]),t._v(" HTML语义化标签 有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("< header > ：头部标签")]),t._v(" "),a("li",[t._v("< nav > ：导航标签")]),t._v(" "),a("li",[t._v("< article > ：内容标签")]),t._v(" "),a("li",[t._v("< section > ：定义文档某个区域")]),t._v(" "),a("li",[t._v("< aside > ：侧边栏标签")]),t._v(" "),a("li",[t._v("< footer > ：尾部标签")]),t._v(" "),a("li",[t._v("< video > ： 视频")]),t._v(" "),a("li",[t._v("< audio > ：音频")]),t._v(" "),a("li",[t._v("语义化标准主要是针对搜索引擎的, 移动端更喜欢使用这些标签，这些标签在页面中可以使用多次，在 IE9 中，需要把这些元素转换为块级元素")])]),t._v(" "),a("h2",{attrs:{id:"伪类和伪元素的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伪类和伪元素的区别是什么"}},[t._v("#")]),t._v(" 伪类和伪元素的区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("用于选择DOM树之外的信息，或是不能用简单选择器进行表示的信息。（相当于一个特殊的class选择器，用来添加一些特殊效果）\n简而言之作用于元素当前的状态修饰（点击，悬浮，链接）")]),t._v(" "),a("li",[t._v("因为DOM树没有定义的虚拟元素。不同于其他选择器，它不以元素为最小选择单位，它选择的是元素指定内容。相当于一个特殊元素（span、div），可以用来存放一些特殊样式或者内容。\n简而言之作用于元素当前内容修饰（之前、之后、首字、首行）")])]),t._v(" "),a("h2",{attrs:{id:"css如何实现垂直居中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css如何实现垂直居中"}},[t._v("#")]),t._v(" CSS如何实现垂直居中？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("居中元素宽高已知")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("absolute + margin auto\n顾名思义，就是利用当前元素的 position: absolute; 和 margin: auto;\n注意使用此方法：父元素与当前元素的高度要设置；\n通过将各个方向的距离都设置为 0，此时将 margin 设置为 auto，就可以实现垂直居中显示了；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("absolute + 负 margin\n利用绝对定位百分比 50% 来实现，因为当前元素的百分比是基于相对定位（也就是父元素）来定位的;\n然后再用负的 margin-top 和 margin-left 来进行简单的位移即可，因为现在的负 margin 是基于自身的高度和宽度来进行位移的。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("absolute + calc\n使用 CSS3 的一个计算函数来进行计算即可；")])])])])]),t._v(" "),a("li",[a("p",[t._v("居中元素宽高未知")]),t._v(" "),a("ul",[a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("absolute + transform\n利用 CSS3 的新特性 transform；因为 transform 的 translate 属性值如果是一个百分比，那么这个百分比将是基于自身的宽高计算出来的。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("line-height + vertical-align\n把当前元素设置为行内元素，然后通过设置父元素的 text-align: center; 实现水平居中；\n同时通过设置当前元素的 vertical-align: middle; 来实现垂直居中；\n最后设置当前元素的 line-height: initial; 来继承父元素的line-height。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("table 表格元素\n通过最经典的 table 元素来进行水平垂直居中，不过代码看起来会很冗余，不推荐使用；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[t._v("css-table 表格样式\n如果一定要使用 table 的特性，但是不想写 table 元素的话，那么css-table 就很适合你；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"8"}},[a("li",[t._v("flex 布局（一）\n要说现在较为流行和使用较多的布局方案，那么非 flex 莫属了，那么举例两个最常见的使用方式 ~\n直接在 flex-container 上通过几行代码即可很优雅的实现")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"9"}},[a("li",[t._v("flex + margin auto（二）\n在 flex-item 上更加优雅的实现")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"10"}},[a("li",[t._v("grid 网格布局 (一)\ngrid 布局相信大家在实际项目中用的较少，主要是该布局实在是太超前，导致了兼容性不是那么理想，但是不可否认的是 grid 的能力在 css 布局中绝对是一个质的飞越。\nCSS Grid 包含与 Flexbox 几乎相同的对齐选项，因此我们可以在 grid-container 上优雅的实现")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"11"}},[a("li",[t._v("grid 网格布局 (二)\n同样我们可以像 Flexbox 一样，在 grid-item 上优雅的实现")])])])])])]),t._v(" "),a("h2",{attrs:{id:"css常见的选择器有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css常见的选择器有哪些"}},[t._v("#")]),t._v(" CSS常见的选择器有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("id选择器、类选择器、属性选择器、伪类选择器、伪元素选择器、组合选择器等。")])]),t._v(" "),a("h2",{attrs:{id:"css的优先级如何计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css的优先级如何计算"}},[t._v("#")]),t._v(" CSS的优先级如何计算？")]),t._v(" "),a("ul",[a("li",[t._v("CSS优先级的计算是基于三个因素\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("内联样式的优先级最高；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("ID选择器的优先级次之;")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("类属性和伪类选择器的优先级最低。")])])])])])]),t._v(" "),a("h2",{attrs:{id:"长度单位px、em和rem的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#长度单位px、em和rem的区别是什么"}},[t._v("#")]),t._v(" 长度单位px、em和rem的区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("px 是像素单位，它是相对显示器分辨率而言的，它的大小是固定的；em 是相对单位，它相对于父元素的字体大小而定；rem 是相对单位，它相对于根元素（html元素）的字体大小而定。")])]),t._v(" "),a("h2",{attrs:{id:"讲一下flex弹性盒布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲一下flex弹性盒布局"}},[t._v("#")]),t._v(" 讲一下flex弹性盒布局？")]),t._v(" "),a("ul",[a("li",[t._v("Flex 弹性盒布局是一种CSS布局模式，它可以让元素在一个容器中水平或垂直排列，并且可以自动拉伸以适应不同的屏幕尺寸。它可以让你更轻松地创建响应式布局，以适应不同的设备和屏幕尺寸。")])]),t._v(" "),a("h2",{attrs:{id:"浮动塌陷问题解决方法是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮动塌陷问题解决方法是什么"}},[t._v("#")]),t._v(" 浮动塌陷问题解决方法是什么？")]),t._v(" "),a("ul",[a("li",[t._v("浮动塌陷问题的解决方法包括：\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("使用更多的容器元素，如div，更好地控制布局；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("使用清晰的结构和精确的尺寸；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("使用css浮动，以更好地控制元素的位置；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("使用css的clear属性，以清除浮动；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("使用css的overflow属性，以控制元素的溢出；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("使用css的position属性，以更好地控制元素的位置。")])])])])])]),t._v(" "),a("h2",{attrs:{id:"position属性的值有哪些-各个值是什么含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#position属性的值有哪些-各个值是什么含义"}},[t._v("#")]),t._v(" position属性的值有哪些？各个值是什么含义？")]),t._v(" "),a("ul",[a("li",[t._v("position 属性的值有static、relative、absolute、flxed四种。static：默认值，没有定位，元素出现在正常的流中（忽略top，bottom，left，right，z-index声明）；relative：相对定位，相对于其正常位置进行定位；absolute：绝对定位，相对于最近的已定位祖先元素进行定位；flxed：固定定位，相对于浏览器窗口进行定位。")])]),t._v(" "),a("h2",{attrs:{id:"bfc、ifc是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bfc、ifc是什么"}},[t._v("#")]),t._v(" BFC、IFC是什么？")]),t._v(" "),a("ul",[a("li",[t._v("BFC和IFC是指建筑信息模型中的构建格式，BFC是Building Fabric Component 的缩写，IFC是Industry Foundation Classes的缩写。BFC是一种用于描述建筑物外观和结构的构件格式，而IFC是一种用于描述建筑内部结构的构件格式。")])]),t._v(" "),a("h2",{attrs:{id:"谈谈对原型链的理解。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对原型链的理解。"}},[t._v("#")]),t._v(" 谈谈对原型链的理解。")]),t._v(" "),a("ul",[a("li",[t._v("原型链是JavaScript中一种重要的对象继承机制，它可以让对象之间建立一种继承关系，从而让对象可以共享属性和方法。原型链的基本原理是，每个对象都有一个指向另一个对象的指针，这个指针指向的对象叫做原型对象，而原型对象又有自己的原型对象，以此类推，形成一条链条，这就是原型链。")])]),t._v(" "),a("h2",{attrs:{id:"js如何实现继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js如何实现继承"}},[t._v("#")]),t._v(" js如何实现继承？")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript支持原型继承，它是一种对象继承的方式，它可以让所有对象从一个原型对象中继承属性。原型继承的实现方式是：定义一个构造函数，它的原型对象是另一个构造函数的实例，从而达到继承的目的。")])]),t._v(" "),a("h2",{attrs:{id:"js有哪些数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js有哪些数据类型"}},[t._v("#")]),t._v(" js有哪些数据类型？")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript中有6种不同数据类型：字符串、数字、布尔值、null undefined和对象。")])]),t._v(" "),a("h2",{attrs:{id:"js有哪些判断类型的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js有哪些判断类型的方法"}},[t._v("#")]),t._v(" js有哪些判断类型的方法？")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript中有以下几种判断类型方法：typeof、instanceof、Object.prototype.toString.call()、constructor、Object.prototype.isPrototypeOF().")])]),t._v(" "),a("h2",{attrs:{id:"如何判断一个变量是否数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个变量是否数组"}},[t._v("#")]),t._v(" 如何判断一个变量是否数组？")]),t._v(" "),a("ul",[a("li",[t._v("可以使用Array.isArray()方法来判断一个变量是否是数组。")])]),t._v(" "),a("h2",{attrs:{id:"null-和-undefined-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-的区别"}},[t._v("#")]),t._v(" Null 和 undefined 的区别？")]),t._v(" "),a("ul",[a("li",[t._v("null表示一个空的对象，而undefined表示一个未定义的值，它们之间的区别在于null表示一个空的对象，而undefined表示一个未定义的值。\n主要的区别是，null表示一个空的对象，而undefined表示一个未定义的值。null表示一个空的对象，它可以被赋值给任何变量，而undefined表示一个未定义的值，它不能被赋值给任何变量。此外，null可以被比较，而undefined不能被比较。")])]),t._v(" "),a("h2",{attrs:{id:"call-bind-apply的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-bind-apply的区别"}},[t._v("#")]),t._v(" call bind apply的区别？")]),t._v(" "),a("ul",[a("li",[t._v("call 方法可以接受多个参数，第一个参数是函数运行时的上下文，其余参数是函数本身需要的参数。bind bind方法也可以接受多个参数，第一个参数是函数运行时的上下文，其余参数是函数本身需要的参数，但是bind 方法会返回一个新的哈数，而不是直接执行函数。apply apply方法也可以接受多个参数，第一个参数是函数运行时的上下文，第二个参数是一个参数数组，其中包含函数本身需要的参数。")])]),t._v(" "),a("h2",{attrs:{id:"防抖节流的概念-实现防抖和节流。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防抖节流的概念-实现防抖和节流。"}},[t._v("#")]),t._v(" 防抖节流的概念？实现防抖和节流。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("防抖和节流是用于减少函数调用的技术。防抖是在用户触发事件后，一定时间内只执行一次函数，而节流是在一定时间内只执行一次函数。实现防抖和节流的方法有：使用定时器，使用计数器，使用节流函数，使用防抖函数等。")])]),t._v(" "),a("li",[a("p",[t._v("使用JavaScript实现防抖，可以使用setTimeout()函数，在用户触发事件后，设置一个定时器，当定时器到期时，执行事件处理函数。\n使用JavaScript实现节流，可以使用setinterval()函数，在用户触发事件后，设置一个定时器，每隔一段时间，执行一次事件处理函数。")])])]),t._v(" "),a("h2",{attrs:{id:"深拷贝、浅拷贝的区别-如何实现深拷贝和浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝、浅拷贝的区别-如何实现深拷贝和浅拷贝"}},[t._v("#")]),t._v(" 深拷贝、浅拷贝的区别？如何实现深拷贝和浅拷贝？")]),t._v(" "),a("ul",[a("li",[t._v("深拷贝和浅拷贝区别在于，深拷贝会创建一个新的对象，而浅拷贝只是复制一个引用，指向原来的对象。实现深拷贝可以使用序列化和反序列化的方式，也可以使用copy模块的deepcopy函数；实现浅拷贝可以使用copy模块的copy函数。")])]),t._v(" "),a("h2",{attrs:{id:"对比-一下var、const、let。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对比-一下var、const、let。"}},[t._v("#")]),t._v(" 对比 一下var、const、let。")]),t._v(" "),a("ul",[a("li",[t._v("var：声明的变量可以再声明之前使用，并且可以重新声明。\nconst：声明的变量不能在声明之前使用，并且不能重新声明。\nlet：声明的便令不能在声明之前使用，但可以重新声明。")])]),t._v(" "),a("h2",{attrs:{id:"es-next新特性有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es-next新特性有哪些"}},[t._v("#")]),t._v(" ES next新特性有哪些？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("ESnext新特性包括：箭头函数、类和模块、块级作用域、可选链操作符。新的数据类型、新的迭代器和生辰器、新的函数参数特性、新的对象属性特性、新的字符串特性、新的数学函数、新的数组方法、新的数据结构、新的正则表达式特性、新的安全特性、新的语言特性等。")])]),t._v(" "),a("li",[a("p",[t._v("ESnext新特性包括：箭头函数、类和模块、块级作用域、可选链操作符、新的数据类型、Promise.allSettled()、String.prototype.matchAll()、globalThis、BigInt、哈希算法等。")])])]),t._v(" "),a("h2",{attrs:{id:"箭头函数和普通函数区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数和普通函数区别是什么"}},[t._v("#")]),t._v(" 箭头函数和普通函数区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("箭头函数和普通函数的主要区别在于它们的语法。箭头函数使用箭头(=>)来定义，而普通函数使用function关键字。此外，箭头函数没有自己的this，它可以从外部环境继承this，而普通函数有自己的this，它的值取决于函数调用的方式。")])]),t._v(" "),a("p",[t._v("## 使用new创建对象的过程是什么样的？")]),t._v(" "),a("ul",[a("li",[t._v("使用new创建的过程包括：1.创建一个新的空对象；2.将新对象的原型指向构造函数的原型；3.将this指向新对象；4.执行构造函数中的代码；5.返回新对象。")])]),t._v(" "),a("h2",{attrs:{id:"this指向系列问题。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this指向系列问题。"}},[t._v("#")]),t._v(" this指向系列问题。")]),t._v(" "),a("ul",[a("li",[t._v("this指向的是调用它的对象，它的值取决于函数调用方式。在全局作用域中，this指向函数的直接调用者；在对象方法中，this指向调用该方法的对象；在构造函数中，this指向新创建的对象；在call、apply、和bind方法中，this指向指定的对象。")])]),t._v(" "),a("h2",{attrs:{id:"手写bind方法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写bind方法。"}},[t._v("#")]),t._v(" 手写bind方法。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"谈谈对闭包的理解-什么是闭包-闭包有哪些应用场景-闭包有什么缺点-如何避免闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对闭包的理解-什么是闭包-闭包有哪些应用场景-闭包有什么缺点-如何避免闭包"}},[t._v("#")]),t._v(" 谈谈对闭包的理解？什么是闭包？闭包有哪些应用场景？闭包有什么缺点？如何避免闭包？")]),t._v(" "),a("ul",[a("li",[t._v("闭包是一种特殊的函数，它可以访问定义它的作用域之外的变量。它可以让函数在定义它的作用域之外仍然可以访问和修改变量。\n闭包的应用场景包括：函数作为参数传递，模块化编程，实现私有变量，实现延迟加载等。\n闭包的缺点是它可能会导致内存泄漏，因为它会持有外部变量的引用，而外部变量可能不会被释放。\n要避免闭包导致内存泄漏，可以使用弱引用，以及在闭包函数中显式地释放外部变量的引用。")])]),t._v(" "),a("h2",{attrs:{id:"谈谈对js事件循环的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对js事件循环的理解"}},[t._v("#")]),t._v(" 谈谈对js事件循环的理解？")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript事件循环是一种机制，它允许开发人员在JavaScript中定义和处理事件。它使用一个循环来检查事件队列，并在发生事件时调用相应的处理程序。并在发生事件时调用相应的处理程序。它可以让开发人员更轻松地吹复杂的事件，而不必担心处理程序之间的冲突。")])]),t._v(" "),a("h2",{attrs:{id:"谈谈对promise理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对promise理解"}},[t._v("#")]),t._v(" 谈谈对promise理解？")]),t._v(" "),a("ul",[a("li",[t._v("Promise是一种异步编程的解决方案，它可以让你更容易地处理异步操作，并且可以让你更容易地管理多个异步操作之间的依赖关系。")])]),t._v(" "),a("h2",{attrs:{id:"手写-promise。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写-promise。"}},[t._v("#")]),t._v(" 手写 Promise。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyPromise")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("executor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pending'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reason "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onResolvedCallbacks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onRejectedCallbacks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("resolve")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pending'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fulfilled'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onResolvedCallbacks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reason")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pending'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rejected'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reason "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onRejectedCallbacks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("executor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("onFulfilled"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" onRejected")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fulfilled'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onFulfilled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rejected'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onRejected")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pending'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onResolvedCallbacks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n             "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onFulfilled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n             "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n             "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onRejectedCallbacks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n               "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onRejected")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n               "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"实现-promise-all方法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-promise-all方法。"}},[t._v("#")]),t._v(" 实现 Promise.all方法。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("PromiseAll")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("promises")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" resolvedCounter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" promiseNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" promises"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" resolvedValues "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("promiseNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" promiseNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("promises"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           resolvedCounter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n           resolvedValues"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n           "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolvedCounter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" promiseNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolvedValues"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reason")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n                 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"typescript中type和interface的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript中type和interface的区别是什么"}},[t._v("#")]),t._v(" Typescript中type和interface的区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("Type是TypeScript中的一种类型声明，它可以用来声明一个类型的变量，函数或类，它可以用来指定变量的类型，函数的参数类型和返回值类型，以及类的成员变量类型。\ninterface是Typescript中另一个类型声明，它可以用来定义一组相关属性和方法的集合。它可以用来定义对象的结构，以及类的继承关系。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲typescript中的泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲typescript中的泛型"}},[t._v("#")]),t._v(" 讲讲Typescript中的泛型？")]),t._v(" "),a("ul",[a("li",[t._v("Typescript中的泛型是一种强大的工具，它可以帮助我们在编写代码时见到重复的工作，并且可以提高代码的可读性和可维护性。泛型可以让我们定义函数或类的参数类型，而不必指定具体的类型，这样可以让我们在使用函数或类时，可以更加灵活地使用不同的类型。")])]),t._v(" "),a("h2",{attrs:{id:"typescript如何实现一个函数的重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript如何实现一个函数的重载"}},[t._v("#")]),t._v(" Typescript如何实现一个函数的重载？")]),t._v(" "),a("ul",[a("li",[t._v("TypeScript支持函数重载，可以通过定义多个函数签名来实现。每个函数签名都必须有一个唯一的参数类型列表，以便TypeScript可以根据传入的参数类型来选择正确的函数签名。")])]),t._v(" "),a("h2",{attrs:{id:"cmmonjs和esm区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmmonjs和esm区别"}},[t._v("#")]),t._v(" CmmonJS和ESM区别？")]),t._v(" "),a("ul",[a("li",[t._v("CommonJS是一种用于实现JavaScript模块化的规范，它采用同步的方式加载模块，模块的整体加载，在一个模块加载完成前，不会执行其他模块。而ESM是ECMAScript模块的缩写，是一种采用异步方式加载模块的规范，它允许按需加载模块，模块的加载不影响它后面语句的运行。")])]),t._v(" "),a("h2",{attrs:{id:"柯里化是什么-有什么用-怎么实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#柯里化是什么-有什么用-怎么实现"}},[t._v("#")]),t._v(" 柯里化是什么？有什么用？怎么实现？")]),t._v(" "),a("ul",[a("li",[t._v("柯里化是一种函数式编程技术，它允许将多参数函数转换为只有一个参数的函数。它的用途是可以将复杂的函数调用变得更加简单，更容易理解。实现柯里化的方法是使用闭包，将多参数函数转换为一个函数，该函数接受一个参数，并返回一个新函数，该新函数接受剩余的参数，并返回最终的结果。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲js垃圾回收机制。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲js垃圾回收机制。"}},[t._v("#")]),t._v(" 讲讲js垃圾回收机制。")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript的垃圾回收机制是一种自动内存管理机制，它的目的是自动清理不再使用的内存，以便释放出可用的内存空间。它通过检测哪些变量和对象不再被使用，然后将其从内存中清除，以便释放出可用的内存空间。\nJavaScript的垃圾回收机制是基于引用的次数，当引用的次数变为0时，该值就会被从内存中清除。")])]),t._v(" "),a("h2",{attrs:{id:"实现一个发布订阅。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现一个发布订阅。"}},[t._v("#")]),t._v(" 实现一个发布订阅。")]),t._v(" "),a("ul",[a("li",[t._v("发布订阅模式是一种消息传递模式，它允许发布者发布消息，订阅者订阅消息，而不需要发布者和订阅者之间有任何直接的联系。实现发布订阅模式的一种方法是使用消息队列，例如RabbitMQ。发布者可以将消息发布到消息队列，而订阅者可以从消息队列中订阅消息。另一种实现发布订阅模式的方法是使用WebSocket，发布者可以将消息发送到WebSocket服务器，而订阅者可以从WebSocket服务器订阅消息。")])]),t._v(" "),a("h2",{attrs:{id:"如何实现数组怕平"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现数组怕平"}},[t._v("#")]),t._v(" 如何实现数组怕平？")]),t._v(" "),a("p",[t._v("可以使用JavaScript的Array.prototype.flat()方法来实现数组平铺。该方法可以将多维数组平铺成一堆数组。\n例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("flat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[1,2,3,4,5,6]")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"如何实现数组去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现数组去重"}},[t._v("#")]),t._v(" 如何实现数组去重？")]),t._v(" "),a("ul",[a("li",[t._v("可以使用Set数据结构来实现数组去重，set数据结构中的元素是唯一的，可以将数组中的元素添加到Set中，最后将Set转换为数组即可实现数组去重。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲vuex的使用方法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲vuex的使用方法。"}},[t._v("#")]),t._v(" 讲讲Vuex的使用方法。")]),t._v(" "),a("ul",[a("li",[t._v("Vuex 是一个专门为Vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。使用Vuex可以让我们更容易地管理应用的状态，并且可以更轻松地实现组件之间的通信。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲vue双向绑定原理。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲vue双向绑定原理。"}},[t._v("#")]),t._v(" 讲讲Vue双向绑定原理。")]),t._v(" "),a("p",[t._v("vue双向绑定原理是通过 Object.defineProperty()来实现的，它会监听属性的getter和setter，当属性值发生改变时，会触发相应的回调函数，从而实现双向绑定的效果。")]),t._v(" "),a("h2",{attrs:{id:"mvvm和mvc区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvvm和mvc区别是什么"}},[t._v("#")]),t._v(" mvvm和mvc区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("MVC是模型（Model）-视图（View）-控制器（Controller）的缩写，它是一种软件设计模式，用于分离应用程序的逻辑，表示和控制。MVVM是模型（Model）-视图（View）-视图模型（View Model）的缩写，它是一种软件设计模式，用于将用户界面的表示和应用程序的业务逻辑分离开来。MVC模式中，控制器负责处理用户输入，模型负责处理数据，视图负责显示数据。而MVVM模式中，视图模型负责处理用户输入，模型负责处理数据，视图负责显示数据。")])]),t._v(" "),a("h2",{attrs:{id:"vue组件间通信方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue组件间通信方式有哪些"}},[t._v("#")]),t._v(" Vue组件间通信方式有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("$emit $on $parent $children provide/inject VUEX enentBus等。")])]),t._v(" "),a("h2",{attrs:{id:"computed和watch区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed和watch区别是什么"}},[t._v("#")]),t._v(" computed和watch区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("computed是基于它的依赖缓存，只有它的依赖值发生改变时才会重新求值，而watch会在数据发生变化时触发回调函数。")])]),t._v(" "),a("h2",{attrs:{id:"v-for和v-if同时使用有问题吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-for和v-if同时使用有问题吗"}},[t._v("#")]),t._v(" v-for和v-if同时使用有问题吗？")]),t._v(" "),a("ul",[a("li",[t._v("v-for 和v-if同时使用没有问题，但是要注意v-for优先级比v-if高，所以v-if应该放在v-for的外面。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲前端路由原理。比较一下history和hash这两种路由。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲前端路由原理。比较一下history和hash这两种路由。"}},[t._v("#")]),t._v(" 讲讲前端路由原理。比较一下history和hash这两种路由。")]),t._v(" "),a("ul",[a("li",[t._v("前端路由是指在浏览器端实现的路由，它可以改变浏览器地址栏的URL，从而实现页面的切换。\nhistory路由是基于HTML5 History API的，它可以改变浏览器地址栏的URL，但不会刷新页面，从而实现页面的切换。\nhash路由是基于URL的hash值（#号后面的部分）的，它可以改变浏览器地址栏的URL，但不会刷新页面，从而实现页面的切换。\n总的来说，history路由更加符合用户的习惯，而hash路由更加简单，但是它的URL不太友好。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲vue的虚拟dom-原理-好处是什么-相对于手动操作dom-性能更好吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲vue的虚拟dom-原理-好处是什么-相对于手动操作dom-性能更好吗"}},[t._v("#")]),t._v(" 讲讲Vue的虚拟DOM，原理，好处是什么？相对于手动操作DOM，性能更好吗？")]),t._v(" "),a("ul",[a("li",[t._v("vue的虚拟DOM原理是，它将真实的DOM树转换成一个JavaScript对象，这个对象叫做虚拟DOM，它可以更快更有效地渲染出真实的DOM树。它的好处是可以更快地渲染出真实的DOM树，而且可以更有效地更新DOM树，因为它只需要更新虚拟DOM，而不是更新真实的DOM树。相对于手动操作DOM，性能更好，因为它可以更快地渲染出真实的DOM树，而且可以更有效地更新DOM树。")])]),t._v(" "),a("h2",{attrs:{id:"说说vue的keep-alive使用及原理。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说说vue的keep-alive使用及原理。"}},[t._v("#")]),t._v(" 说说Vue的keep-alive使用及原理。")]),t._v(" "),a("ul",[a("li",[t._v("vue的keep-alive是一个内置组件，它可以缓存组件的实例，从而避免重复渲染和重新创建实例。它的原理是，当组件被切换时，vue会将组件实例缓存起来，而不是销毁它们，当再次切换回来时，vue会从缓存中取出实例，而不是重新创建实例。")])]),t._v(" "),a("h2",{attrs:{id:"vue父子组件生命周期触发顺序是怎样的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue父子组件生命周期触发顺序是怎样的"}},[t._v("#")]),t._v(" Vue父子组件生命周期触发顺序是怎样的？")]),t._v(" "),a("p",[t._v("vue父子组件的生命周期触发顺序是：父组件的beforeCreate -> 子组件的beforeCreate -> 父组件的created -> 子组件的created ->\n父组件的beforeMount -> 子组件的beforeMount -> 父组件的mounted -> 子组件的mounted -> 父组件的beforeUpdate -> 子组件的beforeUpdate -> 父组件的updated -> 子组件的updated -> 父组件的beforeDestroy -> 子组件的beforeDestroy -> 父组件的destroyed -> 子组件的destroyed。")]),t._v(" "),a("h2",{attrs:{id:"vue-nexttick的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-nexttick的实现"}},[t._v("#")]),t._v(" Vue.nextTick的实现？")]),t._v(" "),a("p",[t._v("vue.nextTick的实现是通过使用vue内部的异步队列来实现的，它会将回调函数放入一个异步队列中，等待下一次DOM更新循环结束之后，再执行回调函数")]),t._v(" "),a("h2",{attrs:{id:"讲讲vue-diff算法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲vue-diff算法。"}},[t._v("#")]),t._v(" 讲讲Vue diff算法。")]),t._v(" "),a("ul",[a("li",[t._v("VueDiff算法是一种基于vue.js的增量更新算法，它可以有效地检测出VUE组件之间的变化，并且可以有效地更新组件的状态。从而提高组件的性能。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲react-diff算法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲react-diff算法。"}},[t._v("#")]),t._v(" 讲讲React diff算法。")]),t._v(" "),a("ul",[a("li",[t._v("ReactDiff 算法是一种用于比较两个React组件树的算法，它可以检测出两个树之间的差异，并且可以更新DOM树以反映这些差异。reactdiff算法的核心思想是，它会比较两个树的节点，如果节点不同，它还会检查子节点，如果子节点也不同，它会继续比较子节点，直到找到最小的差异。")])]),t._v(" "),a("h2",{attrs:{id:"react组件复用方式有哪几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react组件复用方式有哪几种"}},[t._v("#")]),t._v(" React组件复用方式有哪几种？")]),t._v(" "),a("ul",[a("li",[t._v("react组件复用方式有以下几种：\n"),a("ul",[a("li",[t._v("通过继承React.Component类来实现组件复用；")]),t._v(" "),a("li",[t._v("通过React.cloneElement()方法来实现组件复用；")]),t._v(" "),a("li",[t._v("通过React.createElement()方法来实现组件复用；")]),t._v(" "),a("li",[t._v("通过React.PureComponent类来实现组件复用；")]),t._v(" "),a("li",[t._v("通过React.Fragment组件来实现组件复用；")]),t._v(" "),a("li",[t._v("通过React.Children.map()方法来实现组件复用；")]),t._v(" "),a("li",[t._v("通过React.forwardRef()方法来实现组件复用；")]),t._v(" "),a("li",[t._v("通过React.lazy()方法来实现组件复用；")]),t._v(" "),a("li",[t._v("通过React.memo()方法来实现组件复用；")]),t._v(" "),a("li",[t._v("通过React Hooks来实现组件复用。")])])])]),t._v(" "),a("h2",{attrs:{id:"react-fiber是什么-有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-fiber是什么-有什么用"}},[t._v("#")]),t._v(" React fiber是什么？有什么用？")]),t._v(" "),a("ul",[a("li",[t._v("React Fiber是React16的一个重大更新，它是一种新的重新构建React的技术，它可以提高React的性能，改善UI的响应性，并且可以更好地处理动态内容。它还可以改善React的可扩展性，使开发人员能够更轻松地构建复杂的用户界面。")])]),t._v(" "),a("h2",{attrs:{id:"react生命周期有哪些-react16废弃了哪些-为什么要废弃-新增的生命周期钩子有哪些-有什么作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react生命周期有哪些-react16废弃了哪些-为什么要废弃-新增的生命周期钩子有哪些-有什么作用"}},[t._v("#")]),t._v(" React生命周期有哪些？React16废弃了哪些？为什么要废弃？新增的生命周期钩子有哪些？有什么作用？")]),t._v(" "),a("ul",[a("li",[t._v("React生命周期包括：Mounting（挂载）、Updating（更新）、Unmounting（卸载）。React16废弃了componentWillMount、componentWillReceiveProps、componentWillUpdate三个生命周期钩子，因为这些钩子的使用会导致代码变得混乱，不利于维护。新增的生命周期钩子有：getDerivedStateFromProps、getSnapshotBeforeUpdate、componentDidCatch，它们的作用分别是：getDerivedStateFromProps：在接收到新的props或state时被调用；getSnapshotBeforeUpdate：在更新发生之前被调用；componentDidCatch：在组件发生错误时被调用。")])]),t._v(" "),a("h2",{attrs:{id:"如何对react性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何对react性能优化"}},[t._v("#")]),t._v(" 如何对React性能优化？")]),t._v(" "),a("ul",[a("li",[t._v("使用React.PureComponent代替React.Component,以减少不必要的重新渲染。")]),t._v(" "),a("li",[t._v("使用shouldComponentUpdate来控制组件的更新。")]),t._v(" "),a("li",[t._v("使用key属性来控制列表中的元素更新。")]),t._v(" "),a("li",[t._v("使用React.memo来优化函数组件的性能。")]),t._v(" "),a("li",[t._v("使用React.lazy和Suspense来懒加载组件。")]),t._v(" "),a("li",[t._v("使用优化的图像格式，如WebP。")]),t._v(" "),a("li",[t._v("使用React.Fragment来减少不必要的DOM节点。")]),t._v(" "),a("li",[t._v("使用shouldComponentUpdate来控制组件的更新。")]),t._v(" "),a("li",[t._v("使用immutable数据结构来减少不必要的对象比较。")]),t._v(" "),a("li",[t._v("使用CSS in JS来减少不必要的样式重绘。")])]),t._v(" "),a("h2",{attrs:{id:"react的setstate是同步的还是异步的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react的setstate是同步的还是异步的"}},[t._v("#")]),t._v(" React的setState是同步的还是异步的？")]),t._v(" "),a("ul",[a("li",[t._v("setState是异步")])]),t._v(" "),a("h2",{attrs:{id:"讲讲react事件绑定原理。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲react事件绑定原理。"}},[t._v("#")]),t._v(" 讲讲React事件绑定原理。")]),t._v(" "),a("ul",[a("li",[t._v("React事件绑定原理是通过React内部的SyntheticEvent类来实现的，他是一个跨浏览器的虚拟事件类，它可以模拟浏览器原生事件，从而使React应用可以在所有浏览器中保持一致的事件行为。SyntheticEvent类会把浏览器原生事件的所有属性都代理到它自己的实例上，从而使React应用可以像处理浏览器原生事件一样处理它们。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲react的hooks-有什么好处-有哪些常用的hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲react的hooks-有什么好处-有哪些常用的hook"}},[t._v("#")]),t._v(" 讲讲React的hooks，有什么好处？有哪些常用的hook？")]),t._v(" "),a("ul",[a("li",[t._v("React Hooks是React 16.8版本引入的新特性，它可以让你在不编写class的情况下使用state以及其他React特性。它的好处是可以让你更轻松地编写组件，并且可以更好地复用代码。常用的hooks包括useState、useEffect、useContext、useReducer、useCallback、useMemo、useRef等。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲reactkey的作用。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲reactkey的作用。"}},[t._v("#")]),t._v(" 讲讲Reactkey的作用。")]),t._v(" "),a("ul",[a("li",[t._v("Reactkey是一种JavaScript库，它可以帮助开发人员更轻松地创建和管理用户界面（UI）。它可以帮助开发人员更轻松地处理用户输入，更新UI，处理事件，以及更多。它还可以帮助开发人员更轻松地管理状态，以及更轻松地编写可重用的组件。")])]),t._v(" "),a("h2",{attrs:{id:"谈谈react的类组件和函数式组件的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈react的类组件和函数式组件的区别。"}},[t._v("#")]),t._v(" 谈谈React的类组件和函数式组件的区别。")]),t._v(" "),a("ul",[a("li",[t._v("React 的类组件是使用ES6类来定义的，它们具有自己的状态和生命周期函数，可以访问和更新它们的状态并且可以使用其他类组件的功能。函数式组件是使用JavaScript函数来定义的，它们不具有自己的状态，但可以接受props，并返回一个React元素。")])]),t._v(" "),a("h2",{attrs:{id:"webpack性能优化有哪些方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack性能优化有哪些方法"}},[t._v("#")]),t._v(" webpack性能优化有哪些方法？")]),t._v(" "),a("ul",[a("li",[t._v("使用Tree Shaking来减少未使用的代码。")]),t._v(" "),a("li",[t._v("使用Scope Hoisting来减少函数作用域的开销。")]),t._v(" "),a("li",[t._v("使用DllPlugin和DllReferencePlugin来拆分代码块。")]),t._v(" "),a("li",[t._v("使用HappyPack来并行处理任务。")]),t._v(" "),a("li",[t._v("使用webpack-bundle-analyzer来分析和优化打包文件。")]),t._v(" "),a("li",[t._v("使用webpack-dev-server来提高开发环境的性能。")]),t._v(" "),a("li",[t._v("使用UglifyJSPlugin来压缩和混淆代码。")]),t._v(" "),a("li",[t._v("使用webpack-merge来合并webpack配置文件。")])]),t._v(" "),a("h2",{attrs:{id:"webpack的loader和plugin区别是什么-常用的plugin和loader有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack的loader和plugin区别是什么-常用的plugin和loader有哪些"}},[t._v("#")]),t._v(" webpack的loader和plugin区别是什么？常用的plugin和loader有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("Loader和Plugin的主要区别是，Loader是在打包构建过程中用于对模块的源代码进行转换的，而Plugin则可以用于执行范围更广的任务。常用的Loader有babel-loader、css-loader、file-loader、url-loader等，常用的Plugin有CommonsChunkPlugin、UglifyJsPlugin、HtmlWebpackPlugin等。")])]),t._v(" "),a("h2",{attrs:{id:"webpack构建流程是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack构建流程是什么"}},[t._v("#")]),t._v(" webpack构建流程是什么？")]),t._v(" "),a("ul",[a("li",[t._v("webpack构建流程包括以下几个步骤：1.分析入口文件；2.解析模块依赖；3.根据配置生成代码块；4.生成资源映射；5.输出最终的文件。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲tree-shaking原理。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲tree-shaking原理。"}},[t._v("#")]),t._v(" 讲讲tree-shaking原理。")]),t._v(" "),a("ul",[a("li",[t._v("Tree-shaking是一种优化技术，它可以帮助减少JavaScript文件的体积。它的原理是，在编译时，检查代码中未使用的函数和变量，并将其删除，从而减少文件的体积。Tree-shaking可以有效地减少JavaScript文件的体积，从而提高应用程序的性能。")])]),t._v(" "),a("h2",{attrs:{id:"性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),a("ul",[a("li",[t._v("性能优化是指提高系统的性能，以满足用户的需求。可以通过减少系统资源的使用，提高系统的效率，改善系统的可用性，提高系统的可靠性，以及改善系统的可维护性来实现。")])]),t._v(" "),a("h2",{attrs:{id:"前端页面性能如何优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端页面性能如何优化"}},[t._v("#")]),t._v(" 前端页面性能如何优化？")]),t._v(" "),a("ul",[a("li",[t._v("前端页面性能优化的方法有：1.减少HTTP请求树；2.使用CDN加速；3.合并和压缩脚本和样式表；4.使用异步加载脚本；5.使用Gzip压缩；6.使用缓存；7.优化图片；8.减少DOM元素数量；9.优化css选择器；10.使用css sprites。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲回流和重绘的区别-如何避免回流和重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲回流和重绘的区别-如何避免回流和重绘"}},[t._v("#")]),t._v(" 讲讲回流和重绘的区别，如何避免回流和重绘？")]),t._v(" "),a("ul",[a("li",[t._v("回流和重绘是指浏览器渲染页面的两个步骤，回流是指当元素的位置、大小、内容等发生变化时，浏览器重新计算元素的几何信息，而重绘是指当元素的样式发生变化时，浏览器重新绘制元素的外观。\n要避免回流和重绘，可以尽量减少对DOM的操作，尽量将多次操作合并为一次操作，尽量使用css3的动画尽量使用缓存，尽量使用浏览器的硬件加速等。")])]),t._v(" "),a("h1",{attrs:{id:"安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[t._v("#")]),t._v(" 安全")]),t._v(" "),a("h2",{attrs:{id:"网络攻击有哪些-如何防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络攻击有哪些-如何防御"}},[t._v("#")]),t._v(" 网络攻击有哪些？如何防御？")]),t._v(" "),a("ul",[a("li",[t._v("网络攻击包括：拒绝服务攻击、蠕虫攻击、恶意软件攻击、缓冲区溢出攻击、网络扫描攻击、路由器攻击、网络拆分攻击、网络重定向攻击等。\n防御网络攻击的方法有：安装防火墙、安装杀毒软件、实施安全策略、定期更新系统、加强用户认证、实施备份策略等。")])]),t._v(" "),a("h1",{attrs:{id:"计算机基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机基础"}},[t._v("#")]),t._v(" 计算机基础")]),t._v(" "),a("h2",{attrs:{id:"进程与线程区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程区别是什么"}},[t._v("#")]),t._v(" 进程与线程区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("进程是计算机中的一个基本概念，它是一个独立的执行单元，可以拥有自己的地址空间，而线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲tcp三次握手、四次挥手-为什么要三次握手、四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲tcp三次握手、四次挥手-为什么要三次握手、四次挥手"}},[t._v("#")]),t._v(" 讲讲TCP三次握手、四次挥手，为什么要三次握手、四次挥手？")]),t._v(" "),a("ul",[a("li",[t._v("TCP三次握手：首先，客户端发送一个SYN（synchronize）信号给服务器，表示客户端准备发起一个连接请求；然后，服务器收到客户端的SYN信号后，会发送一个SYN/ACK（synchronize-acknowledge）信号给服务器，表示客户端准备发起一个连接请求；然后，服务器收到客户端SYN信号后，会发送一个SYN/ACK（synchronize-acknowledge）信号给客户端，表示服务器已经收到客户端的连接请求，并准备好接受数据；最后客户端收到服务器的SYN/ACK信号后，会发送一个ACK（acknowledge）信号给服务器，表示客户端已经收到服务器的确认信号，从而完成了三次握手。")]),t._v(" "),a("li",[t._v("TCP四次挥手：首先，客户端发送一个FIN（finish）信号给服务器，表示客户端准备关闭连接；然后服务器收到客户端的FIN信号后，会发送一个ACK（acknowledge）信号给客户端的关闭请求；接着，服务器发送一个FIN信号给客户端，表示服务器也准备关闭连接；最后，客户端收到服务器的FIN信号后，会发送一个ACK信号给服务器，表示客户端已经收到服务器的确认信号，从而完成了四次挥手。")]),t._v(" "),a("li",[t._v("为什么要三次握手，四次挥手：TCP三次握手和四次挥手是为了确保双方的连接可靠的，以及双方的数据传输是安全的。三次握手是为了确保客户端和服务器之间的连接是可靠的，四次挥手是为了确保客户端和服务器之间的数据传输是安全的。")])]),t._v(" "),a("h2",{attrs:{id:"tcp和udp区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp区别是什么"}},[t._v("#")]),t._v(" TCP和UDP区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("TCP和UDP是两种不同的协议，它们之间的主要区别在于：TCP是面向连接的协议，而UDP是无连接的协议TCP提供可靠的服务，因为它在传输过程中会检查数据的完整性；而UDP则不会建立连接，也不会检查数据的完整性，因此提供的是不可靠的服务。")])]),t._v(" "),a("h1",{attrs:{id:"网络通讯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络通讯"}},[t._v("#")]),t._v(" 网络通讯")]),t._v(" "),a("h2",{attrs:{id:"说说从输入url到页面展示出来的整个过程。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说说从输入url到页面展示出来的整个过程。"}},[t._v("#")]),t._v(" 说说从输入url到页面展示出来的整个过程。")]),t._v(" "),a("ul",[a("li",[t._v("当用户输入URL时，浏览器会向服务器发出一个HTTP请求，服务器收到请求后，会根据URL查找对应的文件，如果找到，则将文件发送给浏览器，浏览器收到文件后，会根据文件内容渲染出页面，最后将页面展示给用户。")])]),t._v(" "),a("h2",{attrs:{id:"什么是跨域-为什么会出现跨域-如何解决跨域问题-jsonp原理-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域-为什么会出现跨域-如何解决跨域问题-jsonp原理-是什么"}},[t._v("#")]),t._v(" 什么是跨域？为什么会出现跨域？如何解决跨域问题？jsonp原理 是什么？")]),t._v(" "),a("ul",[a("li",[t._v("跨域是指浏览器不允许一个域的网页访问另一域的资源，这是由浏览器的同源策略所导致的。")]),t._v(" "),a("li",[t._v("出现跨域的原因是因为浏览器的同源策略，它要求一个网页只能访问来自一个域的资源，以保护用户的安全。")]),t._v(" "),a("li",[t._v("解决跨域问题方法有：JSONP、CORS、代理服务器、HTML5新特性等。")]),t._v(" "),a("li",[t._v("JSONP（JSON with Padding）是一种跨域数据传输技术，它允许网页从不同域加载资源，而不会受到同源策略的限制。")]),t._v(" "),a("li",[t._v("JSONP是一种在不支持跨域资源共享（CORS）的浏览器中实现跨域的方式。")])]),t._v(" "),a("h2",{attrs:{id:"html5新特性是哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html5新特性是哪些"}},[t._v("#")]),t._v(" HTML5新特性是哪些")]),t._v(" "),a("ul",[a("li",[t._v("语义化标签")]),t._v(" "),a("li",[t._v("音频处理API （audio，video）")]),t._v(" "),a("li",[t._v("canvas、webGLC")]),t._v(" "),a("li",[t._v("拖拽释放（drag and drop)API")]),t._v(" "),a("li",[t._v("history API")]),t._v(" "),a("li",[t._v("requestAnimationFrama")]),t._v(" "),a("li",[t._v("地理位置（Geolocation）API")]),t._v(" "),a("li",[t._v("websocket")]),t._v(" "),a("li",[t._v("web存储 localStorage、sessionStorage")]),t._v(" "),a("li",[t._v("表单控件，calendar、data、time、email、URL、search")])]),t._v(" "),a("h2",{attrs:{id:"http各版本的改进都是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http各版本的改进都是什么"}},[t._v("#")]),t._v(" http各版本的改进都是什么？")]),t._v(" "),a("ul",[a("li",[t._v("HTTP1.0：支持持久连接、管线化请求、增加可缓存性、请求响应消息格式化、支持首部字段、支持数据压缩")]),t._v(" "),a("li",[t._v("HTTP1.1：支持长连接、增加状态码、改进缓存策略、支持范围请求、支持网页嵌套、支持网页重定向、支持分块传输编码")])]),t._v(" "),a("h2",{attrs:{id:"https原理是什么-为什么可以保证安全性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https原理是什么-为什么可以保证安全性"}},[t._v("#")]),t._v(" https原理是什么？为什么可以保证安全性？")]),t._v(" "),a("ul",[a("li",[t._v("HTTPS（HyperText Transfer Protocol Secure）是一种安全的协议，它是HTTP（HyperText Transfer Protocol）的安全版本。它使用SSL/TLS来加密所有数据传输，以确保数据安全性。SSL/TLS使用密钥对和加密技术来确保数据安全，以防止黑客窃取或篡改数据。")])]),t._v(" "),a("h2",{attrs:{id:"http常见状态码有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http常见状态码有哪些"}},[t._v("#")]),t._v(" http常见状态码有哪些？")]),t._v(" "),a("p",[t._v("常见的HTTP状态码有：200 OK，表示请求成功；301 moved permanently，表示永久性重定向；302 found，表示临时性重定向；400 bad request，表示客户端请求错误；401 unauthorized，表示未授权；403 forbidden，表示禁止访问；404 not found，表示服务器找不到请求资源；500internal server error，表示服务器内部错误。")]),t._v(" "),a("h2",{attrs:{id:"http有哪些方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http有哪些方法"}},[t._v("#")]),t._v(" http有哪些方法？")]),t._v(" "),a("ul",[a("li",[t._v("http 方法包括 get、post、put、delete、head、options、trace、connect等。")])]),t._v(" "),a("h2",{attrs:{id:"get和post区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get和post区别是什么"}},[t._v("#")]),t._v(" get和post区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("get 是一种获取资源的请求方式，它是一种幂等的请求，即对同一资源的多次请求，其结果和第一次请求的结果是一样的；而post是一种向服务器提交数据的请求方式，它不是幂等的，即对同一个资源的多次请求，其结果可能会不一样。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲http缓存机制。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲http缓存机制。"}},[t._v("#")]),t._v(" 讲讲http缓存机制。")]),t._v(" "),a("ul",[a("li",[t._v("http缓存机制是指在客户端和服务器之间使用缓存来提高网络性能的一种机制。它可以减少网络传输，提高网页加载速度，减少服务器压力，提高用户体验。http缓存机制通过在客户端和服务器之间缓存网页内容，以便在客户端请求相同的内容时，可以从缓存中获取，而不必重新从服务器获取。")])]),t._v(" "),a("h2",{attrs:{id:"cdn是什么-它的原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cdn是什么-它的原理是什么"}},[t._v("#")]),t._v(" cdn是什么？它的原理是什么？")]),t._v(" "),a("ul",[a("li",[t._v("CDN是内容分发网络的缩写，它是一种分布式网络技术，可以将网路的内容分发到全球各地的服务器上，以提高网站的访问速度和可用性。原理是将网站的内容分发到全球各地的服务器上，当用户访问网站时，会自动将请求转发到最近的服务器上，从而提高网站的访问速度和可用性。")])]),t._v(" "),a("h2",{attrs:{id:"讲讲304协商缓存过程。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲304协商缓存过程。"}},[t._v("#")]),t._v(" 讲讲304协商缓存过程。")]),t._v(" "),a("ul",[a("li",[t._v("304协商缓存过程是一种HTTP协议中的缓存机制，它允许客户端和服务器之间进行缓存协商，以确定客户端是否可以使用缓存的内容。304协商缓存过程的步骤：客户端发送一个HTTP请求，请求中包含一个If-Modified-Since头，其中包含上次请求的时间戳。\n服务器收到请求后，检查请求中的If-Modified-Since头，如果请求中的时间戳比服务器上的文件时间戳更新，则服务器返回一个HTTP 304响应，表示文件未更新，客户端可以使用缓存的内容。\n如果请求中的时间戳比服务器上的文件时间戳旧，则服务器返回一个HTTP 200响应，表示文件已更新，客户端需要重新下载文件。")])]),t._v(" "),a("h2",{attrs:{id:"浏览器有哪些缓存-localstorage、sessionstorage、cookie的、session的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器有哪些缓存-localstorage、sessionstorage、cookie的、session的区别是什么"}},[t._v("#")]),t._v(" 浏览器有哪些缓存？localStorage、sessionStorage、cookie的、session的区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("浏览器缓存包括localStorage、sessionStorage和cookie。localStorage是一种持久性的本地存储，，它的数据在浏览器关闭后仍然存在，可以跨页面访问，而且它的存储容量更大，一般为5MB。")]),t._v(" "),a("li",[t._v("sessionStorage是一个临时性的本地存储，它的数据在浏览器关闭后就会被清除，而且它的存储容量更小，一般为2MB。")]),t._v(" "),a("li",[t._v("cookie是一种用于在客户端和服务器之间传递信息的技术，它的数据在浏览器关闭后也会被清除，但是它可以跨页面访问，而且它的存储容量更小，一般为4KB。")]),t._v(" "),a("li",[t._v("localStorage和sessionStorage都是存储在客户端的，但是localStorage的数据永久保存，而sessionStorage的数据只在当前会话中有效，当页面关闭后，数据会被清除。cookie是存储在服务器端的，它可以设置过期时间，当过期时间到达时，cookie会被清除。session是存储在服务器端的，它可以设置过期时间，当用户关闭浏览器或者会话结束时，session会被清除。")])]),t._v(" "),a("h2",{attrs:{id:"learning-to-be-a-software-designer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#learning-to-be-a-software-designer"}},[t._v("#")]),t._v(" learning to be a software designer")]),t._v(" "),a("ul",[a("li",[t._v("学好软件设计并成为一名软件设计师，最重要的是不断实践和持续学习。")]),t._v(" "),a("li",[a("ol",[a("li",[t._v("实践 软件设计需要大量的实践和经验。不断地编写代码并将设计原则应用到实际项目中，可以帮助您了解如何将它们应用到不同的情况中。尝试不同的方法和技术，并学习如何处理常见的问题，以便在实际项目中更好地应对。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("持续学习 软件设计是一个不断发展和变化的领域。因此，持续学习和探索新技术和最佳实践是非常重要的，以跟上行业的变化和发展。阅读书籍、参加培训和研讨会、加入社区和参与开源项目等，都是保持学习的好方法。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("理解业务需求 作为一名软件设计师，您需要理解业务需求并将它们转化为设计。了解客户需求和目标，能够帮助您设计出更好的软件系统。同时，您还需要与其他团队成员合作，以确保软件系统的设计符合整个团队的目标和需求。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("关注用户体验 软件设计不仅仅是关注代码和技术，还需要关注用户体验。软件系统的设计应该是用户友好的，并且易于使用。因此，了解用户需求和行为，将设计原则应用到用户体验中是非常重要的。 综上所述，学好软件设计并成为一名软件设计师，需要不断地实践和学习，理解业务需求，关注用户体验，并与其他团队成员合作。")])])])]),t._v(" "),a("h2",{attrs:{id:"谈一下对网页标准和标准制定机构重要性的理解。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈一下对网页标准和标准制定机构重要性的理解。"}},[t._v("#")]),t._v(" 谈一下对网页标准和标准制定机构重要性的理解。")]),t._v(" "),a("ul",[a("li",[t._v("网页标准和标准定制机构在网页开发中器至关重要的作用。它们可以却表网页开发的流程和结果的一致性，从而使网页的访问者获得最佳的体验。标准制定机构的标准也可以帮助开发者提高网页的可用性，提高网页的可访问性，以及更好地满足访问者的需求。此外，标准定制机构可以帮助简化网页开发过程，减少开发者的工作量。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);